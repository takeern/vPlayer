{"version":3,"file":"pages_index.chunk.8a7ff286793e254af9de.hot-update.js","sources":["webpack:///./src/pages/index.css","webpack:///./src/player/format/hls/loader.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1624523291499\n      var cssReload = require(\"/Users/tangqi/work/test/jinkelaPlayer/node_modules/_mini-css-extract-plugin@1.6.0@mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.id, {\"esModule\":false,\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  ","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Loader } from '../../constants';\nimport M3U8Parse from \"./demux/M3U8Parse\";\nimport { WorkerEvent, ERROR_MSG, PlayerEvent, loaderStatus, ManagerEvent } from '../../constants';\nimport Demuxer from './demux/tsDemuxer';\nexport default class HlsLoader extends Loader {\n    constructor(event, option) {\n        super(event, option);\n        this.init();\n    }\n    destroy() {\n        this.state = {\n            workerReady: false,\n            workerMsgQueue: [],\n            intervalId: {},\n            currentIndex: null,\n            currentUrl: null,\n            destroy: true,\n            firstPlay: false\n        };\n        this.metaState = {\n            duration: 0,\n            videoStartTime: null,\n            audioStartTime: null,\n            startTime: null\n        };\n    }\n    get duration() {\n        return this.metaState.duration;\n    }\n    seek(time) {\n        var _a, _b, _c;\n        return __awaiter(this, void 0, void 0, function* () {\n            // const buffered = this.getBuffer();\n            // // 如果当前\n            // if (time >= buffered.start && time <= buffered.end) {\n            //   const { datas } = this.option.demux2videoChannel;\n            //   const ptsTime = time / HlsLoader.baseTime;\n            //   const index = datas.findIndex(item => item.PTS > ptsTime);\n            //   if (index > 0) {\n            //     if (index > 1) {\n            //       datas.splice(0,  index - 1);\n            //     }\n            //     this.option.demux2videoChannel.forceRead();\n            //   }\n            //   return;\n            // }\n            time -= this.metaState.startTime;\n            if ((_b = (_a = this.state.hslInfo) === null || _a === void 0 ? void 0 : _a.segments) === null || _b === void 0 ? void 0 : _b.length) {\n                const index = (_c = this.state.hslInfo) === null || _c === void 0 ? void 0 : _c.segments.findIndex(item => {\n                    if (time > item.duration) {\n                        time -= item.duration;\n                        return false;\n                    }\n                    return true;\n                }); // console.log(index, time);\n                // 数据提前加载，然后对于没卵用的 decode 数据 丢弃,\n                if (index > -1) {\n                    this.option.bf2demuxChannel.clear();\n                    this.option.demux2videoChannel.clear(); // console.log('clear, channel');\n                    this.option.flushHttp();\n                    this.tsDemuxer.flush();\n                    setTimeout(() => {\n                        this.unsafe_changeCurrentIndex(index, true);\n                    }, 0);\n                }\n            }\n        });\n    }\n    getBuffer() {\n        const buffered = {\n            start: 0,\n            end: 0\n        };\n        const { datas } = this.option.demux2videoChannel;\n        if (datas.length) {\n            buffered.start = datas[0].PTS * HlsLoader.baseTime;\n            buffered.end = datas[datas.length - 1].PTS * HlsLoader.baseTime;\n        }\n        return buffered;\n    }\n    unsafe_changeCurrentIndex(index, force = false) {\n        var _a, _b, _c, _d, _e;\n        // console.log('unsafe_changeCurrentIndex', index, force);\n        if (((_b = (_a = this.state.hslInfo) === null || _a === void 0 ? void 0 : _a.segments) === null || _b === void 0 ? void 0 : _b.length) && index < ((_d = (_c = this.state.hslInfo) === null || _c === void 0 ? void 0 : _c.segments) === null || _d === void 0 ? void 0 : _d.length)) {\n            const { uri } = (_e = this.state.hslInfo) === null || _e === void 0 ? void 0 : _e.segments[index];\n            if (!force && uri === this.state.currentUrl) {\n                console.warn(ERROR_MSG.REQUEST_REPEAT, `request url: ${uri}, currentUrl: ${this.state.currentUrl}`);\n                return;\n            }\n            this.state.currentUrl = uri;\n            this.state.currentIndex = index;\n            this.option.getData(uri);\n        }\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.state = {\n                workerReady: false,\n                workerMsgQueue: [],\n                intervalId: {},\n                currentIndex: null,\n                currentUrl: null,\n                destroy: false,\n                firstPlay: false\n            };\n            this.metaState = {\n                duration: 0,\n                videoStartTime: null,\n                audioStartTime: null,\n                startTime: null\n            };\n            this.tsDemuxer = new Demuxer(Object.assign({ channel: this.option.demux2videoChannel, handleRecievePacket: this.handleRecievePacket.bind(this) }, this.option));\n            this.bindEvent();\n            this.loadSource(this.option.url);\n            this.run();\n        });\n    }\n    bindEvent() { }\n    loadSource(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!url) {\n                throw ERROR_MSG.SOURCE_NULL;\n            }\n            this.state.hslInfo = yield M3U8Parse.parse(this.option.url);\n            if (this.state.hslInfo) {\n                this.metaState.duration = this.state.hslInfo.duration; // this.state.hslInfo.segments.length = 5;\n                this.unsafe_changeCurrentIndex(0);\n            }\n            else {\n                throw ERROR_MSG.PARSESOURCE;\n            }\n        });\n    }\n    /**\n     * 1. await 阻塞式检查（如果可以的话）｜pipe 一个空 data，然后被阻塞， demux decode 池子状态，\n     * 2. 阻塞式读取 bf2demux 池子的bf\n     * 3. 将 bf 喂入解封装器\n     */\n    run() {\n        return __awaiter(this, void 0, void 0, function* () {\n            while (!this.state.destroy) {\n                // console.log('获取 demux2video 状态');\n                yield this.option.demux2videoChannel.pipe(null); // console.log('demux2video 状态 通过');\n                const data = yield this.option.bf2demuxChannel.read(); // console.log('bf2demuxChannel 状态 通过');\n                this.onRecieveBuf(data);\n                this.tsDemuxer.handleRecieveBuffer(data);\n            }\n        });\n    }\n    /**\n     * P2 todo：如果收到buffer， 不是当前发送的buffer，则将 buffer 放入缓冲区，当\n     * 当前buffer 发送完，则顺序发送缓冲区内 buffer\n     *\n     * P1: 当前仅仅支持顺序解码.\n     */\n    onRecieveBuf({ url, done }) {\n        // console.log('收到http 数据', { url, done });\n        if (this.state.currentUrl && url !== this.state.currentUrl) {\n            return console.warn('数据加载超前，收到数据');\n        }\n        if (done) {\n            // console.log('onRecieveBuf', done);\n            this.unsafe_changeCurrentIndex(++this.state.currentIndex);\n        }\n    }\n    handleRecievePacket(data) {\n        // const { currentIndex } = this.state;\n        const packet = {\n            DTS: data.pes.DTS,\n            PTS: data.pes.PTS,\n            data_byte: data.pes.data_byte\n        };\n        switch (data.stream_type) {\n            case 36:\n                if (!this.metaState.videoStartTime) {\n                    this.metaState.videoStartTime = packet.PTS * HlsLoader.baseTime;\n                    this.sendMetadataEvent();\n                } // 解析视频\n                this.option.demux2videoChannel.forcePipe(packet);\n                break;\n            case 3:\n            case 15:\n            case 17:\n                // 解析音频\n                if (!this.metaState.audioStartTime) {\n                    this.metaState.audioStartTime = packet.PTS * HlsLoader.baseTime;\n                    this.sendMetadataEvent();\n                }\n                console.log(packet.PTS, packet.data_byte);\n                if (this.option.status === loaderStatus.worker) {\n                    self.postMessage({\n                        type: WorkerEvent.GETAUDIOPACKET,\n                        payload: packet\n                    }, [packet.data_byte.buffer]);\n                }\n                else {\n                    this.event.emit(ManagerEvent.GETAUDIOPACKET, packet);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    sendMetadataEvent() {\n        const { videoStartTime, audioStartTime, duration } = this.metaState;\n        if (videoStartTime && audioStartTime && duration) {\n            this.metaState.startTime = Math.min(videoStartTime, audioStartTime);\n            this.event.emit(PlayerEvent.LOADEDMETADATA, {\n                duration: this.metaState.duration,\n                startTime: this.metaState.startTime\n            });\n        }\n    }\n}\nHlsLoader.baseTime = 1 / 90000;\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;;;AACA;AAAA;AACA;AACA;AACA;AAHA;AAGA;AACA;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAIA;AACA;AALA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAPA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAIA;AACA;AALA;AAIA;AAAA;AACA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AA5BA;AA8BA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;;;AA3LA;AACA;AACA;;;;AAxBA;AACA;AADA;AAkNA;;;;;;;A","sourceRoot":""}