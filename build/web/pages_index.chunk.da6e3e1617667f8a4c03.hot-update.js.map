{"version":3,"file":"pages_index.chunk.da6e3e1617667f8a4c03.hot-update.js","sources":["webpack:///./src/pages/index.tsx"],"sourcesContent":["import { createElement, useRef, useEffect, useState } from 'rax';\nimport View from 'rax-view';\nimport './index.css';\nimport Player from '../player/player';\nimport Loader from '../player/format/hls/loader';\nimport * as Chart from 'echarts';\nimport { getPieOption } from './webUI';\nlet chart;\nvar Tagnames;\n(function (Tagnames) {\n    Tagnames[\"decodeAvgTime\"] = \"\\u6BCF\\u5E27\\u89E3\\u7801\\u5E73\\u5747\\u8017\\u65F6\";\n    Tagnames[\"decodeCount\"] = \"\\u5DF2\\u89E3\\u7801\\u5E27\\u6570\";\n    Tagnames[\"fps\"] = \"fps\";\n    Tagnames[\"renderAvgErrorTime\"] = \"\\u5E73\\u5747\\u6E32\\u67D3\\u8BEF\\u5DEE\";\n    Tagnames[\"renderCount\"] = \"\\u6E32\\u67D3\\u6B21\\u6570\";\n    Tagnames[\"dropFrames\"] = \"\\u4E22\\u5E27\\u6B21\\u6570\";\n    Tagnames[\"duration\"] = \"\\u89C6\\u9891\\u957F\\u5EA6\";\n    Tagnames[\"startTime\"] = \"\\u8D77\\u59CB\\u64AD\\u653E\\u65F6\\u95F4\";\n    Tagnames[\"currentTime\"] = \"\\u5F53\\u524D\\u64AD\\u653E\\u65F6\\u95F4\";\n    Tagnames[\"decodeSumTime\"] = \"\\u89E3\\u7801\\u603B\\u8017\\u65F6\";\n    Tagnames[\"frameLength\"] = \"\\u89E3\\u7801\\u7F13\\u51B2\\u533A\\u672A\\u6D88\\u8D39\\u5E27\\u6570\";\n    Tagnames[\"frameInfo\"] = \"\\u5E27\\u5206\\u8FA8\\u7387\";\n    Tagnames[\"bufferedTime\"] = \"\\u7F13\\u51B2\\u533A\\u65F6\\u95F4\";\n})(Tagnames || (Tagnames = {}));\n;\nvar Scale;\n(function (Scale) {\n    Scale[\"decodeAvgTime\"] = \"ms\";\n    Scale[\"renderAvgErrorTime\"] = \"ms\";\n    Scale[\"duration\"] = \"s\";\n    Scale[\"startTime\"] = \"s\";\n    Scale[\"currentTime\"] = \"s\";\n    Scale[\"decodeSumTime\"] = \"ms\";\n    Scale[\"bufferedTime\"] = \"s\";\n})(Scale || (Scale = {}));\nconst renderItem = (key, value) => {\n    return <div className='tag' key={key}>\n      <div className='tag_key'>{key + ': '}</div>\n      <div className='tag_value'>{value}</div>\n    </div>;\n};\nexport const renderItems = list => {\n    return Object.entries(list).map(([key, value]) => {\n        if (Scale[key]) {\n            if (!isNaN(Number(value))) {\n                value = Number(value).toFixed(4);\n            }\n            value = value.toString() + Scale[key];\n        }\n        if (Tagnames[key]) {\n            return renderItem(Tagnames[key], value);\n        }\n        return null;\n    });\n};\nconst MyComponent = () => {\n    const cav = useRef(null);\n    const div = useRef(null);\n    const [state, setState] = useState({\n        performanceStatus: null,\n        metadata: null,\n        currentTime: null,\n        frameInfo: null,\n        isplaying: false,\n        bufferedTime: null,\n        canuse: {\n            sab: !!window.SharedArrayBuffer,\n            oc: !!window.OffscreenCanvas\n        }\n    });\n    const { performanceStatus, metadata, currentTime, frameInfo, isplaying, bufferedTime, canuse } = state;\n    const handlePlay = () => {\n        window.player.play();\n    };\n    const handlePause = () => {\n        window.player.pause();\n    };\n    const getPerformanceStatus = () => {\n        const status = window.player.performanceStatus;\n        setState(pstate => (Object.assign(Object.assign({}, pstate), { performanceStatus: status })));\n        window.player.getBufferSize();\n    };\n    const handleCanplay = () => {\n        getPerformanceStatus();\n        setInterval(() => {\n            getPerformanceStatus();\n        }, 1000);\n    };\n    const renderPie = payload => {\n        const data = [{\n                value: payload.bf,\n                name: '原始流'\n            }, {\n                value: payload.packet,\n                name: 'packet'\n            }, {\n                value: payload.frame,\n                name: 'frame'\n            }];\n        chart.setOption(getPieOption(data));\n    };\n    const handleLoadMeta = payload => {\n        setState(pstate => (Object.assign(Object.assign({}, pstate), { metadata: payload })));\n    };\n    const handlePlayerTimeUpdate = () => {\n        const buffered = window.player.buffered;\n        const bufferedTime = buffered.end - buffered.start;\n        setState(pstate => (Object.assign(Object.assign({}, pstate), { bufferedTime: bufferedTime, currentTime: window.player.currentTime })));\n    };\n    const handleLoadFrameInfo = payload => {\n        setState(pstate => (Object.assign(Object.assign({}, pstate), { frameInfo: payload })));\n    };\n    const handlePlayStatusChange = status => {\n        setState(pstate => (Object.assign(Object.assign({}, pstate), { isplaying: status })));\n    };\n    useEffect(() => {\n        chart = Chart.init(div.current, 'dark');\n        if (cav.current) {\n            const player = new Player('http://127.0.0.1:8083/playlist.m3u8', {\n                canvas: cav.current,\n                baseTime: Loader.baseTime // loader: Loader,\n            });\n            window.player = player;\n            player.on('canplay', () => handleCanplay()); // player.on('progress', () => console.log('progress'));\n            player.on('playing', () => handlePlayStatusChange(true));\n            player.on('pause', () => handlePlayStatusChange(false)); // recieveWorkerBufferSize\n            player.on('recieveWorkerBufferSize', payload => renderPie(payload));\n            player.on('loadedmetadata', payload => handleLoadMeta(payload));\n            player.on('timeupdate', () => handlePlayerTimeUpdate());\n            player.on('loadFrameInfo', payload => handleLoadFrameInfo(payload));\n            console.log(player);\n        }\n    }, []);\n    return <View className=\"container\">\n      <div className='canuseWrap'>\n        <div className={`${!canuse.sab && 'canuse_error'}`}>{`SharearryBuffer ${!canuse.sab && 'not'} ready`}</div>\n        <div className={`${!canuse.oc && 'canuse_error'}`}>{`OffscreenCanvas ${!canuse.oc && 'not'} ready`}</div>\n      </div>\n      <canvas ref={cav} className='cav'/>\n      <div className='controlWrap'>\n        <div className='btn' onClick={handlePlay}>play</div>\n        <div className='btn' onClick={handlePause}>pause</div>\n      </div>\n      <div className='infoWrap'>\n        <div ref={div} className='pieWrap'></div>\n        {performanceStatus && <div className='tagWrap'>\n          <div className='tagTitle'>性能参数</div>\n          {renderItems(performanceStatus)}\n        </div>}\n        {metadata && <div className='metaWrap'>\n          <div className='metaTitle'>视频参数</div>\n          {renderItems(metadata)}\n          {frameInfo && renderItems({\n                'frameInfo': `${frameInfo.width} x ${frameInfo.height}`\n            })}\n          {renderItems({\n                currentTime\n            })}\n          {renderItems({\n                bufferedTime\n            })}\n          <div className='status_wrap'>\n            <div className='status_key'>{`当前播放状态: `}</div>\n            <div className='status_value'>{isplaying ? '播放中' : '暂停'}</div>\n          </div>\n        </div>}\n      </div>\n    </View>;\n};\nexport default MyComponent;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAPA;AAAA;AAAA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AApEA;AACA;AAmEA;AACA;AAAA;AAlEA;AACA;AAiEA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AADA;AAIA;AADA;AAIA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;;;;A","sourceRoot":""}